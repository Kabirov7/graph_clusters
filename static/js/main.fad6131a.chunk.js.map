{"version":3,"sources":["Components/SentenceNodes.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Graph3dSentences","useState","require","graphs","myData","setMyData","useEffect","all_nodes","linked_nodes","Object","values","map","item","idx","node1","original_article_url","original_article_title","node2","similar_article_url","similar_article_title","link","push","className","graphData","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6qu3FA+CeA,MAvCf,WACC,MAA4BC,mBAASC,EAAQ,MAA7C,mBAAOC,EAAP,KACA,GADA,KAC4BF,sBAA5B,mBAAOG,EAAP,KAAeC,EAAf,KA4BA,OA1BAC,qBAAU,WACT,IAAIC,EAAwB,GACxBC,EAA2B,GAC/BC,OAAOC,OAAOP,GAAQQ,KAAI,SAACC,EAAWC,GAErC,IAAIC,EAAQ,CACX,GAAMF,EAAKG,qBACX,KAAQH,EAAKI,uBACb,IAAO,GAEFC,EAAQ,CACb,GAAML,EAAKM,oBACX,KAAQN,EAAKO,sBACb,IAAO,GAEFC,EAAO,CACZ,OAAUR,EAAKG,qBACf,OAAUH,EAAKM,qBAEhBV,EAAaa,KAAKD,GAClBb,EAAUc,KAAKP,GACfP,EAAUc,KAAKJ,MAEhBZ,EAAU,CAAC,MAASE,EAAW,MAASC,MACtC,IAGF,qBAAKc,UAAU,MAAf,SACC,cAAC,IAAD,CACCC,UAAWnB,OC3BAoB,MATf,WAEC,OACC,qBAAKF,UAAU,MAAf,SACC,cAAC,EAAD,OCKYG,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.fad6131a.chunk.js","sourcesContent":["import {ForceGraph3D} from \"react-force-graph\";\nimport {useState, useEffect} from \"react\";\n\ninterface LabeledValue {\n\tnodes: Array<any>;\n\tlinks: Array<any>;\n}\n\nfunction Graph3dSentences() {\n\tconst [graphs, setGraphs] = useState(require(\"./graphs.json\"))\n\tconst [myData, setMyData] = useState<LabeledValue>();\n\n\tuseEffect(() => {\n\t\tlet all_nodes: Array<any> = [];\n\t\tlet linked_nodes: Array<any> = [];\n\t\tObject.values(graphs).map((item: any, idx: number) => {\n\t\t\t// console.log(item)\n\t\t\tlet node1 = {\n\t\t\t\t\"id\": item.original_article_url,\n\t\t\t\t\"name\": item.original_article_title,\n\t\t\t\t\"val\": 1\n\t\t\t};\n\t\t\tconst node2 = {\n\t\t\t\t\"id\": item.similar_article_url,\n\t\t\t\t\"name\": item.similar_article_title,\n\t\t\t\t\"val\": 1\n\t\t\t}\n\t\t\tconst link = {\n\t\t\t\t\"source\": item.original_article_url,\n\t\t\t\t\"target\": item.similar_article_url\n\t\t\t}\n\t\t\tlinked_nodes.push(link);\n\t\t\tall_nodes.push(node1);\n\t\t\tall_nodes.push(node2);\n\t\t})\n\t\tsetMyData({\"nodes\": all_nodes, \"links\": linked_nodes})\n\t}, [])\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<ForceGraph3D\n\t\t\t\tgraphData={myData}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default Graph3dSentences;","import React from 'react';\nimport './App.css';\nimport {ForceGraph3D} from \"react-force-graph\";\nimport Graph3dSentences from \"./Components/SentenceNodes\";\n\nfunction App() {\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Graph3dSentences/>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}